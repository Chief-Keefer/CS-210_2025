1. For each problem, state its goal in your own words and describe your approach to solve the 
problem along with any issues you encountered and if/how you managed to solve those issues.

[Problem 1 (Greet Three)]

Goal: Printing arguments given from standard input to standard output

Approach: It was a fairly straight forward program with no issues. The first thing we always do, on any program, is store the arguments within a variable.
Then I print those variables using the standard out library.

[Problem 2 (Three Sort)]

Goal: Sorting three integers given from standard input

Approach: No issues encoutered on this one. I found the largest of the three numbers by using Math.max on integers x and the Math.max of integers y and z.
Then I found the minimum by doing the same thing but with Math.min. Then to get the middle number, I added up all 3 integers and then subtracted the max and min numbers from the total.

[Problem 3 (Great Circle Distance)]

Goal: Performing complex arithmetic and outputting the result to standard output

Approach: This problem was fairly easy, no issues. First, I had to convert the doubles given from standard input from degrees to radian and store them in their respective variables.
Then perform the calculation using the formula given and outputting to standard output.

[Problem 4 (Uniform Random Numbers)]

Goal: Use the StdRandom library to get a 3 random numbers, and then use those numbers to find their mean, variance, and standard deviation.

Approach: This problem was also fairly easy, with no issues. First, I stored 2 ints given from standard input and added one to the upper boundary because StdRandom gives a random number between a and b, not inclusive.
Then I stored 3 random numbers from the upper and lower boundary in their respective variables. Next, I found the mean, standard deviation, and variance by using the random numbers from before and the formulas given.
Finally, I output the mean, standard deviation, and variance on the same line

[Problem 5 (Triangle Inequality)]

Goal: Using boolean conditions and printing the output of the condition.

Approach: This problem was straightforward with no problems. First, as always, we store 3 integers given to us in their respective variables.
Then we print the value of the condition: if each one of the values are less than or equal to the sum of the other too.

[Problem 6 (Quadratic Equation)]

Goal: Implementing conditional statements to check on variables. Performing arithmetic on values given from standard input and printing the value

Approach: Another straightforward program, we perform a check on the first value given to determine whether it is < 0. Then calculate the roots using the quadratic equation and print them

[Problem 7 (Six-sided Die)]

Goal: Using if statements to decide which face of the die to print

Approach: This was one of the more easier problems to solve. First, we get a random number from 1 to 7 non inclusive. Then depending on that number, we print the face corresponding to the number to standard output

[Problem 8 (Playing Card)]

Goal: Implenting if statements and using the StdRandom library to decide which card to print

Approach: Another one of the more easier problems. It is very similar to the Die program, but instead we get 2 random numbers denoting the number of the card and the suit. Then depending on those two numbers,
we print the corresponding number and suit to standard output

[Problem 9 (Greatest Common Divisor)]

Goal: Using while loop to find the GCD

Approach: No issues with this one as well. We take in two ints from standard input. Then we use a while loop until we find the GCD. Inside the while loop, we find the GCD using the mod operator

[Problem 10 (Factorial Function)]

Goal: Implementing for loops to find the Factorial of a number

Approach: This was a fairly easy problem. We take in a value, n, from standard input, and we declare an int denoting the result and set it to 1. Next, we use a for loop up to n, where we start at 1, to
multiply the result by the index in each iteration. After the loop is finished, we print the result.

[Problem 11 (Fibonacci Function)]

Goal: Implement for loops to find the nth number of the Fibonacci sequence

Approach: No issues with this one as it was very similar to the Factorial problem. First, we take in an integer from standard input to find out how long the for loop should go on for. Then we declare 3 variables, a, b, and c. 
In the for loop, we assign c to be equal to a and b, then we make a equal to b and b equal to c. This goes on until we find the nth number in the sequence

[Problem 12 (Primality Test)]

Goal: Implementing nested if statements within a for loop to check for the primality of a number

Approach: Another fairly easy problem. We don't want the loop to go on for a long time, so we loop until i <= square root of n. There is no operator or function that will tell us if a number is prime,
but can we can check if n is divisible by any number using the mod operator. If during any iteration, n is divisible by i, we know the number is not prime.

[Problem 13 (Counting Primes)]

Goal: Implementing nested for loops to count the number of primes less than or equal to a given number, n

Approach: This program was made easy because you can implement code from the problem before. We put the primality test within another for loop, and if a number is prime, 
we break out of that loop and increment the prime counter. Which was declared earlier in the code before the loops

[Problem 14 (Perfect Numbers)]

Goal: Implementing nested for loops to find perfect numbers

Approach: We search through the loops until we find 2 numbers, where 1 divises the other. If we find the divisor, we add it to sum, 
and if the sum is equal to the dividend, then we print the sum to standard output.

[Problem 15 (Ramanujan Numbers)]

Goal: Implementing nested while loops to find ramanujan numbers

Approach: First we take in an integer, n, from standard input to dictate how long we want the loops to run. To start off the loop, we declare an integer a equal to one before the loop. 
Then in each loop we declare a integer that is one more than the previous integer declared. In the innermost loop, we check if the sum of 2 cubes are equal to the sum of the other 2 cubes, 
if it is we print those numbers orderly in standard output. The while loops stop if the cube of an integer is larger than the number given to us from standard input.

2. Did you receive any help? List the sources along with a short description of the help received.

Source                               Help Received
------                               -------------

...                                  ...

3. List any other comments here. Feel free to provide any feedback on how much you learned from
doing the assignment, and whether you enjoyed doing it.

...
